From 544cccf5d9ad9ad99fa8750f0d912740e61b944d Mon Sep 17 00:00:00 2001
From: Slaven Rezic <slaven@rezic.de>
Date: Sat, 25 Mar 2017 21:39:15 +0100
Subject: [PATCH] fix t/op/getppid.t in linux containers (RT #130143)

Allow getppid() to return 0 if the test is running within a linux
container. From "man 2 getppid":

    If the caller's parent is in a different PID namespace (see
    pid_namespaces(7)), getppid() returns 0.
---
 t/op/getppid.t | 16 +++++++++++++++-
 1 file changed, 15 insertions(+), 1 deletion(-)

diff --git a/t/op/getppid.t b/t/op/getppid.t
index 11e0f64..3565525 100644
--- a/t/op/getppid.t
+++ b/t/op/getppid.t
@@ -35,7 +35,8 @@ sub fork_and_retrieve {
 	    unless my ($how, $first, $second) = /^([a-z]+),(\d+),(\d+)\z/;
 	cmp_ok ($first, '>=', 1, "Parent of $which grandchild");
 	my $message = "grandchild waited until '$how'";
-	cmp_ok ($second, '>=', 1, "New parent of orphaned $which grandchild")
+        my $min_getppid_result = is_linux_container() ? 0 : 1;
+	cmp_ok ($second, '>=', $min_getppid_result, "New parent of orphaned $which grandchild")
 	    ? note ($message) : diag ($message);
 
 	SKIP: {
@@ -104,6 +105,19 @@ sub fork_and_retrieve {
     }
 }
 
+sub is_linux_container {
+    my $is_linux_container = 0;
+    if ($^O eq 'linux' && open my $fh, '<', '/proc/1/cgroup') {
+	while(<$fh>) {
+	    if (m{^\d+:pids:(.*)} && $1 ne '/init.scope') {
+		$is_linux_container = 1;
+		last;
+	    }
+	}
+    }
+    $is_linux_container;
+}
+
 my $first = fork_and_retrieve("first");
 my $second = fork_and_retrieve("second");
 SKIP: {
-- 
2.1.4

