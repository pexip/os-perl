#!/usr/bin/perl
	eval "exec perl -S $0 $*"
		if $running_under_some_shell;

# $Id: patsend.SH 1 2006-08-24 12:32:52Z rmanfredi $
#
#  Copyright (c) 1991-1997, 2004-2006, Raphael Manfredi
#  
#  You may redistribute only under the terms of the Artistic Licence,
#  as specified in the README file that comes with the distribution.
#  You may reuse parts of this distribution only within the terms of
#  that same Artistic Licence; a copy of which may be found at the root
#  of the source tree for dist 4.0.
#
# Original Author: Larry Wall <lwall@netlabs.com>
#
# $Log: patsend.SH,v $
# Revision 3.0.1.6  1995/09/25  09:22:02  ram
# patch59: new -i option to add more instructions for end-users
#
# Revision 3.0.1.5  1994/01/24  14:32:46  ram
# patch16: now prefix error messages with program's name
# patch16: don't feed mailer with more than 50 addresses at a time
# patch16: added ~/.dist_profile awareness
#
# Revision 3.0.1.4  1993/08/25  14:08:01  ram
# patch6: now asks for recipient list edition by default
# patch6: new -q option to suppress that
#
# Revision 3.0.1.3  1993/08/24  12:21:59  ram
# patch3: new -u option
# patch3: added Precedence and X-Mailer headers in mail message
# patch3: added ~name expansion for orgname
#
# Revision 3.0.1.2  1993/08/19  07:10:19  ram
# patch3: was not correctly writing the To: header field
#
# Revision 3.0.1.1  1993/08/19  06:42:42  ram
# patch1: leading config.sh searching was not aborting properly
#
# Revision 3.0  1993/08/18  12:10:49  ram
# Baseline for dist 3.0 netwide release.
#

$orgname='PROCURA B.V.';
$mailer='/usr/sbin/sendmail';
$version = '3.5';
$patchlevel = '0';

$progname = &profile;			# Read ~/.dist_profile
require 'getopts.pl';
&usage unless &Getopts("hiquV");

if ($opt_V) {
	print STDERR "$progname $version PL$patchlevel\n";
	exit 0;
} elsif ($opt_h) {
	&usage;
}

chdir '..' if -d '../bugs';

&readpackage;
&readusers if $opt_u;

$orgname = &tilda_expand($orgname);
chop($orgname = `cat $orgname`) if $orgname =~ m|^/|;

while ($_ = shift) {
	if (/^(patch)?[1-9][\d,-]*$/) {
		s/^patch//;
		push(@argv,$_);
	} else {
		push(@dest,$_);
	}
}
$dest = join(' ',@dest);
$dest .= " $recipients" if $opt_u;
&usage unless $dest;

# Offer to edit the address list unless -q
unless ($opt_q) {
	select((select(STDOUT), $| = 1)[0]);
	print "Do you wish to edit the address list? [y] ";
	$ans = <STDIN>;
	unless ($ans =~ /^n/i) {
		@to = split(' ', $dest);
		&listedit(*to);
		$dest = join(' ', @to);
	}
}

$to = join(', ', split(' ', $dest));
@ARGV = @argv;

open(PL,"patchlevel.h") || die "$progname: can't open patchlevel.h: $!\n";
while (<PL>) {
	$maxnum = $1 if /^#define\s+PATCHLEVEL\s+(\d+)/;
}
close PL;
die "$progname: malformed patchlevel.h file.\n" if $maxnum eq '';

if ($#ARGV < 0) {
	@patseq = &patseq($maxnum);
	$lastpat = pop(@patseq);
	$argv = &rangeargs("$lastpat-$maxnum");
} else {
	$argv = &rangeargs(@ARGV);
}

@ARGV = split(' ',$argv);
$argv =~ s/ $//;

if ($#ARGV < 0) {
	print STDERR "$progname: no patches specified.\n";
	&usage;
} elsif ($#ARGV) {
	print "$progname: sending $package $baserev patches $argv to $dest...\n";
} else {
	print "$progname: sending $package $baserev patch $argv to $dest...\n";
}

chdir 'bugs' || die "$progname: can't cd to bugs: $!\n";

fork && exit;

$opt = '-odq' if $mailer =~ /sendmail/;

until ($#ARGV < 0) {
	$patnum = shift;

	# I hate broken mailers! Bust it up into smaller groups of people...
	@dest = split(' ', $dest);
	while (@smalldest = splice(@dest, 0, 50)) {
		$to = join(', ', @smalldest);	# Sensible To: for sendmail
		$smalldest = join(' ', @smalldest);

		open(MAILER, "|$mailer $opt $smalldest") ||
			die "$progname: can't fork $mailer: $!\n";
		print MAILER
"To: $to
Subject: $package $baserev patch #$patnum
Precedence: bulk
X-Mailer: dist [version $version PL$patchlevel]
Organization: $orgname

";
		print MAILER
"$package version $baserev has been recently upgraded with the following patch,
which is being mailed directly to you as you requested when running Configure.

If you are not interested in having future patches mailed directly to you,
please send me the following mail:

	Subject: Command
	\@SH package - $package $baserev

-- $progname speaking for $maintname <$maintloc>.

" if ($opt_i || $opt_u);
		print MAILER
"[The latest patch for $package version $baserev is #$maxnum.]

";
		open(PATCH,"patch$patnum") ||
			die "$progname: can't open patch$patnum: $!\n";
		while (<PATCH>) {
			print MAILER;
		}
		close PATCH;
		close MAILER;
		die "$progname: could not mail patch$patnum.\n" if $?;
	}
}

sub usage {
	print STDERR <<EOM;
Usage: $progname [-hiquV] [patchlist] [recipients]
  -h : print this message and exit
  -i : include information on how to stop receiving future patches
  -q : quick mode, do not offer to edit recipient list
  -u : add all to-be-mailed users
  -V : print version number and exit
EOM
	exit 1;
}

sub readpackage {
	if (! -f '.package') {
		if (
			-f '../.package' ||
			-f '../../.package' ||
			-f '../../../.package' ||
			-f '../../../../.package'
		) {
			die "Run in top level directory only.\n";
		} else {
			die "No .package file!  Run packinit.\n";
		}
	}
	open(PACKAGE,'.package');
	while (<PACKAGE>) {
		next if /^:/;
		next if /^#/;
		if (($var,$val) = /^\s*(\w+)=(.*)/) {
			$val = "\"$val\"" unless $val =~ /^['"]/;
			eval "\$$var = $val;";
		}
	}
	close PACKAGE;
}

sub rangeargs {
	local($result) = '';
	local($min,$max,$_);
	open(PL,"patchlevel.h") || die "Can't open patchlevel.h\n";
	while (<PL>) {
		$maxspec = $1 if /^#define\s+PATCHLEVEL\s+(\d+)/;
	}
	close PL;
	die "Malformed patchlevel.h file.\n" if $maxspec eq '';
	while ($#_ >= 0) {
		$_ = shift(@_);
		while (/^\s*\d/) {
			s/^\s*(\d+)//;
			$min = $1;
			if (s/^,//) {
				$max = $min;
			} elsif (s/^-(\d*)//) {
				$max = $1;
				if ($max == 0 && $maxspec) {
					$max = $maxspec;
				}
				s/^[^,],?//;
			} else {
				$max = $min;
			}
			for ($i = $min; $i <= $max; ++$i) {
				$result .= $i . ' ';
			}
		}
	}
	$result;
}

sub readusers {
	return unless open(USERS, 'users');
	local($_);
	local($status, $name, $pl);
	while (<USERS>) {
		next if /^#/;
		chop if /\n$/;				# Emacs may leave final line without \n
		($status, $pl, $name) = split;
		# Handle oldstyle two-field user file format (PL13 and before)
		$name = $pl unless defined $name;
		if ($status eq 'M') {
			$recipients = $recipients ? "$recipients $name" : $name;
		} elsif ($status eq 'N') {
			$notify = $notify ? "$notify $name" : $name;
		}
	}
	close USERS;
}

# Compute patch sequence by scanning the bugs directory and looking for
# .logs and/or .mods files to determine what was the last issued patch series.
sub patseq {
	local($cur) = @_;		# Current patch level
	local(@seq);			# Issued patch sequence
	local($i);
	for ($i = 1; $i <= $cur; $i++) {
		push(@seq, $i) if -f "bugs/.logs$i" || -f "bugs/.mods$i";
	}
	@seq;
}

# Perform ~name expansion ala ksh...
# (banish csh from your vocabulary ;-)
sub tilda_expand {
	local($path) = @_;
	return $path unless $path =~ /^~/;
	$path =~ s:^~([^/]+):(getpwnam($1))[$[+7]:e;			# ~name
	$path =~ s:^~:$ENV{'HOME'} || (getpwuid($<))[$[+7]:e;	# ~
	$path;
}

# Compute suitable editor name
sub geteditor {
	local($editor) = $ENV{'VISUAL'};
	$editor = $ENV{'EDITOR'} unless $editor;
	$editor = $defeditor unless $editor;
	$editor = 'vi' unless $editor;
	$editor;
}

# Allow user to inplace-edit a list of items held in an array
sub listedit {
	local(*list) = @_;
	local($tmp) = "/tmp/dist.$$";
	local($editor) = &geteditor;
	open(TMP, ">$tmp") || die "Can't create $tmp: $!\n";
	foreach $item (@list) {
		print TMP $item, "\n";
	}
	close TMP;
	system "$editor $tmp";
	open(TMP, "$tmp") || die "Can't reopen $tmp: $!\n";
	chop(@list = <TMP>);
	close TMP;
	unlink $tmp;
}

# Set up profile components into %Profile, add any profile-supplied options
# into @ARGV and return the command invocation name.
sub profile {
	local($profile) = &tilda_expand($ENV{'DIST'} || '~/.dist_profile');
	local($me) = $0;		# Command name
	$me =~ s|.*/(.*)|$1|;	# Keep only base name
	return $me unless -s $profile;
	local(*PROFILE);		# Local file descriptor
	local($options) = '';	# Options we get back from profile
	unless (open(PROFILE, $profile)) {
		warn "$me: cannot open $profile: $!\n";
		return;
	}
	local($_);
	local($component);
	while (<PROFILE>) {
		next if /^\s*#/;	# Skip comments
		next unless /^$me/o;
		if (s/^$me://o) {	# progname: options
			chop;
			$options .= $_;	# Merge options if more than one line
		}
		elsif (s/^$me-([^:]+)://o) {	# progname-component: value
			$component = $1;
			chop;
			s/^\s+//;		# Trim leading and trailing spaces
			s/\s+$//;
			$Profile{$component} = $_;
		}
	}
	close PROFILE;
	return unless $options;
	require 'shellwords.pl';
	local(@opts);
	eval '@opts = &shellwords($options)';	# Protect against mismatched quotes
	unshift(@ARGV, @opts);
	return $me;				# Return our invocation name
}

